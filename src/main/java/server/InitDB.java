/**
 * 
 */
package server;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import map.Cell;
import map.Rand;

import dinosaur.Specie;

/**
 * @author gas12n
 * 
 */
public class InitDB {

	/**
	 * @param args
	 */
	public static void cleanMap() {
		FileOutputStream fos;
		ObjectOutputStream oos;
		int[][] map1 = {
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 0, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1,
						1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1,
						0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 2, 2, 2,
						2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 0,
						1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 2, 2, 0, 0, 2, 1, 1,
						1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0,
						2, 2, 2, 2, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 0, 2, 1, 1,
						1, 2, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 0, 1, 2, 1,
						1, 0, 0, 1, 1, 2, 1, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 2,
						1, 1, 2, 3, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1,
						1, 0, 0, 1, 1, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 1,
						0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 0, 1, 1, 1,
						2, 0, 1, 1, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 1, 1,
						0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 2, 2, 1, 1,
						3, 0, 1, 1, 0, 2, 1, 2, 0, 2, 3, 0, 0, 1, 1, 1, 1, 1,
						0, 0, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2,
						1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0,
						0, 0, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
						1, 0, 0, 1, 1, 1, 1, 2, 0, 2, 1, 0, 0, 1, 1, 1, 1, 2,
						1, 0, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
						1, 0, 0, 1, 2, 2, 1, 2, 0, 2, 2, 1, 1, 2, 1, 1, 1, 2,
						3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1,
						1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 2, 1,
						1, 2, 1, 1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 2, 1, 0, 0, 2,
						1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1,
						1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 0, 0, 0, 2,
						1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 3, 1, 1, 2,
						1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2,
						1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 1, 0, 1, 1, 1, 2, 2,
						1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 2, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 2, 2, 2, 1,
						1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0,
						1, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1,
						1, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 1,
						1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 0, 1,
						2, 1, 0, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1,
						1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
						1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,
						2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1,
						2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 1, 0,
						2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2,
						2, 2, 2, 2, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0,
						2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 2, 2, 1, 2, 0, 1,
						2, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2,
						2, 1, 2, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0,
						2, 0, 2, 1, 1, 1, 3, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1,
						1, 1, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 0, 0, 0, 0, 0, 1, 1,
						0, 1, 1, 0, 0, 1, 2, 2, 0, 1, 1, 1, 2, 2, 1, 2, 0, 0,
						0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0,
						1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 2, 0, 2,
						2, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1,
						1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 0, 2,
						0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 3, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3,
						1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 0, 2,
						1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 2, 2, 2, 2, 2,
						2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 1, 1, 1, 1, 2,
						2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2,
						2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 0, 3, 1, 1, 2,
						3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1,
						2, 1, 0, 0, 0, 2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						1, 1, 1, 0, 3, 2, 2, 2, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0,
						2, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0,
						2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0,
						1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 0, 1, 0,
						2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
						1, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 2, 1, 0, 1, 1,
						2, 2, 2, 0, 3, 2, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 3, 1, 1, 1, 1, 2, 1, 2,
						1, 2, 1, 0, 1, 2, 0, 1, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1,
						2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 1, 1, 1, 1,
						1, 1, 1, 0, 3, 2, 0, 1, 1, 1, 1, 0, 2, 2, 1, 0, 1, 1,
						2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 0, 2, 2, 1, 2, 2, 2, 1, 0,
						0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 1, 2, 2, 2, 2, 2,
						2, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1,
						2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 1, 1,
						2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1,
						1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1,
						1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

		Cell[][] map = new Cell[50][50];

		for (int contRow = 0; contRow < map1.length; contRow++) {
			for (int contCol = 0; contCol < map1[contRow].length; contCol++) {
				map[contRow][contCol] = new Cell();

				switch (map1[contRow][contCol]) {

				case 0: {/* refers to water */
					map[contRow][contCol].setWater(true);
					map[contRow][contCol].setType("a");
					break;
				}
				case 1: {/* refers to earth */
					map[contRow][contCol].setEarth(true);
					map[contRow][contCol].setType("t");
					break;
				}
				case 2: {/* refers to vegetation */
					map[contRow][contCol].setVegetation(true);
					map[contRow][contCol].setType("v");

					/*
					 * generazione random per il valore di energyVegetation il
					 * valore prodotto e' maggiore di 150 ma minore di 250
					 */
					int veg = Math.abs(Rand.generateEnergyVegetationRandom());
					map[contRow][contCol].setEnergyVegetation(veg);
					map[contRow][contCol].setCurrentEnergyVegetation(veg / 6);

					break;
				}
				case 3: {/* refers to carrion */
					map[contRow][contCol].setCarrion(true);
					map[contRow][contCol].setType("c");
					/*
					 * generazione random per il valore di energyCarrion il
					 * valore prodotto e' maggiore di 350 ma minore di 650
					 */
					int car = Math.abs(Rand.generateEnergyCarrionRandom());
					map[contRow][contCol].setEnergyCarrion(car);
					map[contRow][contCol].setCurrentEnergyCarrion(car);

					break;
				}
				default:
					break;

				}
			}
		}

		try {
			fos = new FileOutputStream("src/main/resources/Database/mapDB.out");
			oos = new ObjectOutputStream(fos);
			oos.writeObject(map);
			oos.flush();
			oos.close();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public static void main(String[] args) {
		Map<String, Specie> raceDB = new HashMap<String, Specie>();
		FileOutputStream fos ;
		ObjectOutputStream oos;
				
		try {
			fos = new FileOutputStream("src/main/resources/Database/raceDB.out");
			oos = new ObjectOutputStream(fos);
			oos.writeObject(raceDB);
			oos.flush();
			oos.close();
			fos.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		List<User> users = new ArrayList<User>();
		try {
			fos = new FileOutputStream(
			"src/main/resources/Database/usersDB.out");
			oos = new ObjectOutputStream(fos);
			oos.writeObject(users);
			oos.flush();
			oos.close();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
		}
		
		cleanMap();

	}
}
